/*!
 * Initiative JavaScript Library v1.0.0
 * http://initiati-ve.ca
 *
 * Copyright 2017, Kenny Tchu
 * Dual licensed under the MIT.
 *
 * Date: Nov 30 2017 
 * 
 */

var json = {
    "glossary": {
        "title": "example glossary",
        "GlossDiv": {
            "title": "S",
            "GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
                    "SortAs": "SGML",
                    "GlossTerm": "Standard Generalized Markup Language",
                    "Acronym": "SGML",
                    "Abbrev": "ISO 8879:1986",
                    "GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
                        "GlossSeeAlso": ["GML", "XML"]
                    },
                    "GlossSee": "markup"
                }
            }
        }
    },
    "gloss": {
        "title": "example glossary2",
        "ken": {
            "id": 2,
            "lastname": "tchu"
        }
    },
    "gloss2": {
        "blabla": "ey",
    }
}

var readJson = {
    params: {
        result: {},
        queries: {
            type: "",
            fields: [],
            fieldString: "",
            objects: [],
            conditions: [],
            sources: ""
        },
        localObj: {} // Can be use to store script object
    },
    initparams: function () {
        readJson.params.result = {};
        readJson.params.list = [];
        readJson.params.queries = {
            type: "",
            fields: [],
            fieldString: "",
            sources: "",
            objects: [], // store dynamically object for futur use
            conditions: []
        };
    },
    searchkey: function (obj, search, exit) {
        if (typeof obj != "object") {
            return false;
        }

        if (search != "*") {
            for (var i in obj) {
                if (i == search) {
                    readJson.params.list.push(obj[i]);
                }

                if (obj[i] !== null && typeof (obj[i]) == "object" && i != search) {
                    readJson.searchkey(obj[i], search, 0);
                }
            }
        } else {
            readJson.params.list.push(obj)
        }

        if (exit == 1) {
            return readJson.params.list;
        }
    },
    condition: function (obj, exit) {
        if (typeof obj != "object") {
            return false;
        }

        for (var i in obj) {
            switch (readJson.params.queries.conditions[1]) {
                case "=":
                    boolCondition = obj[i] == readJson.params.queries.conditions[2].trim();
                    break;
                case ">":
                    boolCondition = obj[i] > readJson.params.queries.conditions[2].trim();
                    break;
                case "<":
                    boolCondition = obj[i] < readJson.params.queries.conditions[2].trim();
                    break;
                case "<=":
                    boolCondition = obj[i] <= readJson.params.queries.conditions[2].trim();
                    break;
                case ">=":
                    boolCondition = obj[i] >= readJson.params.queries.conditions[2].trim();
                    break;
                default :
                    alert("Operator not supported");
                    return;
                    break;
            }

            if (i == readJson.params.queries.conditions[0].trim() && boolCondition) {
                readJson.params.list.push(obj);
            } else if (obj[i] !== null && typeof (obj[i]) == "object" && i != "id" && obj[i] != 9) {
                readJson.condition(obj[i], 0);
            }
        }

        if (exit == 1) {
            return readJson.params.list;
        }
    },
    updatekey: function () {

    },
    query: function (query, fn) {
        //reset parameters
        readJson.initparams();

        var reg = /^[^\s]+/gi;
        var statement = query.match(reg);
        if (statement[0].toLowerCase() == 'select') {
            var regex = /(^select\s+)(.*)(\s+from)(?:(.*)(\s+where)(.*)|(.*))/i;
        } else if (statement[0].toLowerCase() == 'update') {
            var regex = /(^update\s+)(.*)(\s+set)(?:(.*)(\s+where)(.*)|(.*))/i;
        } else {
            alert("Error statement regex");
            return;
        }

        var match = query.match(regex);

        //console.log(match)
        if (Array.isArray(match)) {
            readJson.params.queries.type = match[1].trim();

            //Multiple fields
            readJson.params.queries.fieldString = match[2].trim();
            var fields = match[2].split(",");
            var fieldsArr = [];
            for (var i = 0; i < fields.length; i++) {
                fieldsArr.push(fields[i].trim());

            }
            readJson.params.queries.fields = fieldsArr;

            if (typeof match[4] == 'undefined') {
                readJson.params.queries.sources = match[7].trim();
            } else {
                readJson.params.queries.sources = match[4].trim();

                //split condition : allow only one condition
                var re = /[\w\S]+/ig;
                var cond = match[6].match(re);
                readJson.params.queries.conditions = cond;
            }
        }

        console.table(readJson.params.queries);

        if (readJson.params.queries.type != 'undefined' && readJson.params.queries.sources != 'undefined' && Array.isArray(readJson.params.queries.fields)) {
            var qObjName = readJson.params.queries.sources;

            //console.log(readJson.params['localObj'])

            var promise = new Promise((resolve, reject) => {
                if (qObjName === 'localObj') {
                    //Source is from script local object
                    readJson.params.queries.objects.push(readJson.params['localObj']);
                    resolve(readJson.params.queries.objects);
                } else if (typeof window[qObjName] == 'object') {
                    //Source is from windows (browser) object
                    readJson.params.queries.objects.push(window[qObjName]);
                    resolve(readJson.params.queries.objects);
                } else if (typeof qObjName == 'string' && typeof window[qObjName] != 'object') {
                    //Source is from a link
                    var linkRegex = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
                    var url = qObjName.match(linkRegex);

                    if (typeof url == 'undefined') {
                        reject("Not a valid object");
                    } else {
                        // getting the json
                        var oReq = new XMLHttpRequest();
                        //Bypassing the cache
                        oReq.open("GET", url + ((/\?/).test(url) ? "&" : "?") + (new Date()).getTime(), true);
                        oReq.onreadystatechange = function () {

                            if (this.readyState == 4)
                            {
                                if (this.status == 200) {
                                    if (this.response) {
                                        try {
                                            readJson.params.queries.objects.push(JSON.parse(this.response));
                                            resolve(readJson.params.queries.objects);
                                        } catch (e) {
                                            reject(e); // error in the above string (in this case, yes)!
                                        }
                                    }
                                } else if (this.status >= 400) {
                                    reject(this.response);
                                } else {
                                    reject("http error")
                                }
                            }
                        };
                        oReq.send();
                    }
                } else {
                    alert("error source");
                    return;
                }
            });
            promise.then(function (obj) {
                var result = readJson.queryType(readJson.params.queries.type, obj);
                fn.apply(this, [result]);
            });
        } else {
            console.log('Regex error');
        }
    },
    queryType: function (statement, obj) {
        var result = 'Error - no Statement';
        switch (statement.toLowerCase()) {
            case 'select':
                readJson.params.result = {};
                if (readJson.params.queries.conditions.length > 0) {
                    var resCondition = readJson.condition(obj[0], 1);
                    for (var i = 0; i < resCondition.length; i++) {

                        for (var j = 0; j < readJson.params.queries.fields.length; j++) {
                            readJson.params.list = []; // reset result
                            var search = readJson.params.queries.fields[j];
                            var res = {};
                            res = readJson.searchkey(resCondition[i], search, 1);
                            if (res.length > 0) {
                                //If there is a result
                                readJson.params.result[search] = res;
                            }
                        }
                        
                    }
                    result = readJson.params.result;
                } else {
                    for (var i = 0; i < readJson.params.queries.fields.length; i++) {
                        readJson.params.list = []; // reset result
                        var search = readJson.params.queries.fields[i];
                        var res = {};
                        res = readJson.searchkey(obj[0], search, 1);
                        if (res.length > 0) {
                            //If there is a result
                            readJson.params.result[search] = res;
                        }
                    }
                }
                result = readJson.params.result;
                break;
            case 'update':
                result = readJson.updatekey();
                break;
        }
        return result;
    }
}
